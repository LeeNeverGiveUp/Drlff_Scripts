GARFfield force field parameter optimization framework, version 1.0
Author: Andres Jaramillo-Botero (ajaramil@caltech.edu, Caltech (c) 2010-2014)

Usage:
garffield <geo> <ffield> <trainset> <params> [<restraints>] [GA options] [other options] ... or
mpirun -np NumProcs garffield <geo> <ffield> <trainset> <params> [<restraints>] [GA options] [other options]

GA options are: 
  -i ['range' or 'percent'] {parameter interval}
  -g ['GRGA' or 'SSGA'] {replacement strategy: generational or steady-state}
  -m [float between 0-1] {mutation rate}
  -o [float between 0-1] {crossover rate}
  -p [int] {population size}
  -s ['maxiter' or 'nochange'] {convergence criteria}
  -t [int] {stop after int iterations}
  -z [int] {set SSGA population replacement percent}
  -x {perform mutation and crossover}
Other options are:
  -c [int] {Hillclimb every int iterations}
  -C [int] {mincap array size in reax/c allocations}
  -d ['full_debug', 'lammps_debug'] debug mode
  -e ['MPE' or 'SIWE' or 'RMSE' or 'NRMSE' or 'MSE'] {error function}
  -f {check forces on unit cells, instead of performing minimization}
  -F ['reax']
  -G [int] {switch to Conjugate Gradient after int iterations}
  -I [int] {Number of molecular mechanics energy minimization steps}
  -l <filename> {write log to filename, instead of console}
  -M ['fire' or 'sd'] {switch structure minimization algorithm - default is 'cg'}
  -q <filename> {Use pQeq for ReaxFF charges}
  -r [int] {print report every int iterations}
  -R [int] {Restart every int interations}

  -S [float] {safezone factor in reax/c memory allocation}
  -u ['real'] {Force units to be real, i.e. lengths in Angstroms, energies in kcal/mol and forces in kcal/mol-Angstrom}
  -v {Use low-gradient van der Waals for reax/c}
  -w <filename> {write best force field file at same print report report_frequency}
  -W {randomize section weights in training file}
